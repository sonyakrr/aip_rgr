#include <GL/glut.h>
#include <math.h>

void drawplanet(float r, float g, float b);
void drawnlo(float r, float g, float b);
void drawzwezd(float x, float y);
void renderScene();

int main(int argc, char* argv[]){

void renderScene(void);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // эта функция должна здесь жить

    glPushMatrix();
    drawzwezd(0,0);
    drawzwezd(.4,0);
    drawzwezd(.4,0);
    glPopMatrix();

    glutSwapBuffers();


void zwezd(float x, float y);
    glPushMatrix();
    glScalef(.009,.009,-.2);
    glTranslatef(-18.3,-8.2, 0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(240,230,140);
    for(float i=0; i<2*M_PI; i+=M_PI/15) {
    glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

void planet();
    glPushMatrix();
    glScalef(.5,.5,1);
    glTranslatef(-1.3,-1.2,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.128,.166,255);
    for(float i=0; i<2*M_PI; i+=M_PI/15) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glScalef(.3,.1,.2);
    glTranslatef(-2.1,-4.0,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.34,169,.34);
    for(float i=0; i<2*M_PI; i+=M_PI/13) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glScalef(.1,.2,.0);
    glTranslatef(-6.1,-2.0,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.34,169,.34);
    for(float i=0; i<1*M_PI; i+=M_PI/14) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glScalef(.1,.1,.0);
    glTranslatef(-8.1,-8.0,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.34,169,.34);
    for(float i=0; i<1*M_PI; i+=M_PI/15) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glScalef(.2,.1,.1);
    glTranslatef(-4.1,-8.5,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.34,169,.34);
    for(float i=0; i<2*M_PI; i+=M_PI/13) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glScalef(.1,.2,.3);
    glTranslatef(-3.0,-3.5,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.34,169,.34);
    for(float i=0; i<2*M_PI; i+=M_PI/8) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glScalef(.25,.15,-1.1);
    glTranslatef(.3,.2,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.192,.192,.192);
    for(float i=0; i<2*M_PI; i+=M_PI/12) {
    glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();
                        //verh
    glPushMatrix();
    glScalef(.31,.31,-1.1);
    glTranslatef(.3,.2,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.128,.128,.128);
    for(float i=0; i<1*M_PI; i+=M_PI/12) {
    glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();

                        //steklo
void nlo();
    glPushMatrix();
    glScalef(.3,.3,-1);
    glTranslatef(.3,.2,0);
    glBegin(GL_TRIANGLE_FAN);
    glColor3f(.240,.255,255);
    for(float i=0; i<1*M_PI; i+=M_PI/12) {
        glVertex2f(cos(i), sin(i));
    }
    glEnd();
    glPopMatrix();
                         //niz


    glBegin(GL_TRIANGLES);
    glColor3f(.211,.211,.211);
    glVertex2f(-.4,.1);
    glVertex2f(-.3,-.0);
    glVertex2f( .6,.1);

    glColor3f(.211,.211,.211);
    glVertex2f(.6,.1);
    glVertex2f(-.3,-.0);
    glVertex2f(.5,-.0);





        glEnd();

    int main(int argc, char* argv[]);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(600,600);
    glutCreateWindow("Lesson - 0, Start");
    glutDisplayFunc(renderScene);
    glutMainLoop();
    return 0;
}
